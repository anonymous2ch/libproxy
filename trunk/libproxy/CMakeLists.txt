### Main library
add_library(libproxy SHARED config_file.cpp dl_module.cpp module_manager.cpp module_types.cpp pac.cpp proxy.cpp url.cpp)
target_link_libraries(libproxy m pthread dl)
set_property(SOURCE proxy.cpp PROPERTY COMPILE_DEFINITIONS SYSCONFDIR="/etc/";MODULEDIR="${moduledir}")
set_target_properties(libproxy PROPERTIES PREFIX "" COMPILE_FLAGS -g VERSION 0 SOVERSION 0.0.0)
install(TARGETS libproxy LIBRARY DESTINATION ${rlibdir})
install(FILES proxy.h DESTINATION ${rincludedir})

### Misc files
# PkgConfig file
configure_file(libproxy-1.0.pc.in libproxy-1.0.pc @ONLY)
install(FILES libproxy-1.0.pc DESTINATION ${libdir}/pkgconfig)

### Modules
function(px_module name condition)
  if(${condition} GREATER 0)
    if(${condition} GREATER 1)
      message("\t+\t${name}")
    else()
      message("\tm\t${name}")
    endif()
    add_library(${name} MODULE modules/${name}.cpp)
    target_link_libraries(${name} libproxy)
    set_target_properties(${name} PROPERTIES PREFIX "" COMPILE_FLAGS -g)
    set_property(SOURCE modules/${name}.cpp PROPERTY COMPILE_DEFINITIONS SYSCONFDIR="/etc/";LIBEXECDIR="${libexecdir}";GCONFTOOLBIN="${GCONFTOOLBIN}")
    install(TARGETS ${name} LIBRARY DESTINATION ${rmoduledir})
    if(${ARGC} GREATER 3)
      target_link_libraries(${name} ${ARGN})
    endif()
  else()
    message("\t\t${name}")
  endif()
endfunction(px_module)

#
## Dependency detection
#
if(UNIX AND NOT APPLE)
  find_package(PkgConfig REQUIRED)
  function(px_check_modules name)
    pkg_check_modules(${name} ${ARGN})
    if (${name}_FOUND)
      include_directories(${${name}_INCLUDE_DIRS})
      link_directories(${${name}_LIBRARY_DIRS})
    endif()
  endfunction(px_check_modules)

  px_check_modules(X11         x11 xmu)
  px_check_modules(NM          NetworkManager dbus-1)
  px_check_modules(WEBKIT      webkit-1.0)
  px_check_modules(MOZJS       xulrunner-js)
  if(NOT MOZJS_FOUND)
    px_check_modules(MOZJS     firefox-js)
    if(NOT MOZJS_FOUND)
      px_check_modules(MOZJS   mozilla-js)
      if(NOT MOZJS_FOUND)
        px_check_modules(MOZJS seamonkey-js)
      endif()
    endif()
  endif()
  if(X11_FOUND)
    px_check_modules(GNOME     gconf-2.0)
    find_package(KDE4)
    if(${KDE4_FOUND} STREQUAL "TRUE")
      set(KDE4_FOUND 1)
      set(KDE4_LIBRARIES ${KDE4_KDECORE_LIBS})
      include_directories(${KDE4_INCLUDE_DIR})
      link_directories(${KDE4_LIB_DIR})
      string(REGEX REPLACE " *-fno-exceptions" "" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
      string(REGEX REPLACE "visibility=hidden" "visibility=default" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
    else()
      set(KDE4_FOUND 0)
    endif()
  endif()
  find_program(GCONFTOOLBIN gconftool-2)
endif()

#
## Module definition
#
message("MODULES TO BUILD:")
if(UNIX AND NOT APPLE)
  px_module(config_wpad            1)
  px_module(config_envvar          2)
  px_module(config_file            2)
  px_module(config_gnome           ${GNOME_FOUND}  ${X11_LIBRARIES})
  px_module(config_kde4            ${KDE4_FOUND}   ${KDE4_LIBRARIES} ${X11_LIBRARIES})
  px_module(network_networkmanager ${NM_FOUND}     ${NM_LIBRARIES})
  px_module(pacrunner_mozjs        ${MOZJS_FOUND}  ${MOZJS_LIBRARIES})
  px_module(pacrunner_webkit       ${WEBKIT_FOUND} ${WEBKIT_LIBRARIES})
  if(GNOME_FOUND)
    add_executable(pxgconf modules/pxgconf.cpp)
    target_link_libraries(pxgconf ${GNOME_LIBRARIES})
    install(TARGETS pxgconf RUNTIME DESTINATION ${rlibexecdir})
  endif()
elseif(APPLE)
  px_module(pacrunner_webkit       2 ${WEBKIT_LIBRARIES})
  px_module(pacrunner_macosx       2)
elseif(WIN32)
  px_module(config_w32reg          2)
endif()
px_module(ignore_domain            2)
px_module(ignore_ip                2)
px_module(wpad_dns                 2)
px_module(wpad_dnsdevolution       2)
message("")


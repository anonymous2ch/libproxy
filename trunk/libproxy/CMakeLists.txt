### Main library
add_library(libproxy SHARED extension_config.cpp extension_pacrunner.cpp extension_wpad.cpp proxy.cpp url.cpp)
include_directories(../)
if(WIN32)
  target_link_libraries(libproxy libmodman ws2_32)
else()
  target_link_libraries(libproxy libmodman m pthread dl)
endif()
file(TO_NATIVE_PATH ${moduledir} moduledir)
if(WIN32)
  string(REGEX REPLACE "\\\\" "\\\\\\\\" moduledir ${moduledir})
endif()

set_property(SOURCE proxy.cpp PROPERTY COMPILE_DEFINITIONS SYSCONFDIR="/etc/";MODULEDIR="${moduledir}")
set_target_properties(libproxy PROPERTIES PREFIX "" VERSION 0 SOVERSION 0.0.0)
install(TARGETS libproxy DESTINATION ${rlibdir})
install(FILES   proxy.h  DESTINATION ${rincludedir})

### Modules
function(px_module name build)
  if("${build}")
    set(built "*")
    set_property(SOURCE modules/${name}.cpp PROPERTY COMPILE_DEFINITIONS SYSCONFDIR="/etc/";LIBEXECDIR="${libexecdir}")
    add_library(${name} MODULE modules/${name}.cpp)
    target_link_libraries(${name} libproxy)
    set_target_properties(${name} PROPERTIES PREFIX "")
    install(TARGETS ${name} LIBRARY DESTINATION ${rmoduledir})
    if(${ARGC} GREATER 2)
      target_link_libraries(${name} ${ARGN})
    endif()
  endif()
  message("\t${built}\t${name}")
endfunction(px_module)

#
## Dependency detection
#

find_package(PkgConfig)
if("${PKG_CONFIG_FOUND}")
  # Define our magical px_check_modules function
  function(px_check_modules name)
    pkg_check_modules(${name} ${ARGN})
    if(${${name}_FOUND})
      include_directories(${${name}_INCLUDE_DIRS})
      link_directories(${${name}_LIBRARY_DIRS})
    else()
      set(${name}_FOUND 0 PARENT_SCOPE)
    endif()
  endfunction(px_check_modules)

  px_check_modules(X11         x11 xmu)
  px_check_modules(NM          NetworkManager dbus-1)
  px_check_modules(WEBKIT      webkit-1.0)
  px_check_modules(MOZJS       xulrunner-js)
  if(NOT ${MOZJS_FOUND})
    px_check_modules(MOZJS     firefox-js)
    if(NOT ${MOZJS_FOUND})
      px_check_modules(MOZJS   mozilla-js)
      if(NOT ${MOZJS_FOUND})
        px_check_modules(MOZJS seamonkey-js)
      endif()
    endif()
  endif()
  if("${X11_FOUND}")
    px_check_modules(GNOME     gconf-2.0)
    find_package(KDE4)
    if("${KDE4_FOUND}" STREQUAL "TRUE")
      set(KDE4_FOUND 1)
      set(KDE4_LIBRARIES ${KDE4_KDECORE_LIBS})
      include_directories(${KDE4_INCLUDE_DIR})
      link_directories(${KDE4_LIB_DIR})
      string(REGEX REPLACE " *-fno-exceptions" "" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
    else()
      set(KDE4_FOUND 0)
    endif()
  endif()
endif()

if(APPLE)
  find_library(WEBKIT_LIBRARIES JavaScriptCore)
  find_library(SC_LIBRARIES SystemConfiguration)
  find_library(CF_LIBRARIES CoreFoundation)
  if(NOT "${WEBKIT_LIBRARIES}" STREQUAL "")
    set(WEBKIT_FOUND 1)
  endif()
  if(NOT "${SC_LIBRARIES}" STREQUAL "")
    set(SC_FOUND 1)
  endif()
  if(NOT "${CF_LIBRARIES}" STREQUAL "")
    set(CF_FOUND 1)
  endif()
endif()


#
## Module definition
#
message("MODULES TO BUILD:")
px_module(config_envvar            "${UNIX} AND NOT ${APPLE}")
px_module(config_gnome             "${GNOME_FOUND}"  ${X11_LIBRARIES})
px_module(config_kde4              "${KDE4_FOUND}"   ${KDE4_LIBRARIES} ${X11_LIBRARIES})
px_module(config_macosx            "${SC_FOUND}"     ${SC_LIBRARIES} ${CF_LIBRARIES})
px_module(config_w32reg            "${WIN32}")
px_module(ignore_domain            1)
px_module(ignore_hostname          1)
px_module(ignore_ip                1)
px_module(network_networkmanager   "${NM_FOUND}"     ${NM_LIBRARIES})
px_module(pacrunner_mozjs          "${MOZJS_FOUND}"  ${MOZJS_LIBRARIES})
px_module(pacrunner_webkit         "${WEBKIT_FOUND}" ${WEBKIT_LIBRARIES})
px_module(wpad_dns_alias           1)
message("")

### Misc files
# PkgConfig file
if(NOT ${WIN32})
  configure_file(libproxy-1.0.pc.in libproxy-1.0.pc @ONLY)
  install(FILES libproxy-1.0.pc DESTINATION ${libdir}/pkgconfig)
endif()

# GNOME (gconf) helper
if(${GNOME_FOUND})
  add_executable(pxgconf modules/pxgconf.cpp)
  target_link_libraries(pxgconf ${GNOME_LIBRARIES})
  install(TARGETS pxgconf RUNTIME DESTINATION ${rlibexecdir})
endif()
